# exchange_setup.py
# Arquivo principal do rob√¥. Respons√°vel por inicializar a conex√£o,
# configurar par√¢metros e executar o loop de trading principal.

from binance.client import Client
from binance.enums import *
import time
import os

import data 
from keys import BINANCE_API, SECRET_API

# =============================================================================
# FUN√á√ïES DE CONFIGURA√á√ÉO
# =============================================================================

def create_exchange_connection():
    """Cria e retorna o objeto de conex√£o da exchange centralizado."""
    print("Inicializando a conex√£o principal com a exchange...")
    try:
        # Conectando ao Binance Futures usando a biblioteca python-binance
        # MUDAN√áA: Removido testnet=True para usar a API real
        client = Client(BINANCE_API, SECRET_API)
        print("Conex√£o principal estabelecida com sucesso (API REAL).")
        return client
    except Exception as e:
        print(f"ERRO CR√çTICO: N√£o foi poss√≠vel criar a conex√£o com a exchange: {e}")
        return None

def setup_leverage_for_symbol(client, symbol, leverage, margin_type='ISOLATED'):
    """Define a alavancagem para um s√≠mbolo."""
    try:
        # Remove /USDT:USDT do s√≠mbolo para o formato da Binance
        binance_symbol = symbol.replace('/USDT:USDT', 'USDT').replace('/', '')
        
        # Tentar configurar alavancagem
        try:
            client.futures_change_leverage(symbol=binance_symbol, leverage=leverage)
            print(f"  ‚úÖ Alavancagem {leverage}x configurada para {binance_symbol}")
        except Exception as leverage_error:
            error_str = str(leverage_error)
            if "leverage not modified" in error_str:
                print(f"  ‚ÑπÔ∏è  Alavancagem j√° est√° em {leverage}x para {binance_symbol}")
            else:
                print(f"  ‚ö†Ô∏è  {binance_symbol}: {leverage_error}")
        
        return True
    except Exception as e:
        print(f"  ‚ùå ERRO {symbol}: {e}")
        return True  # Continua mesmo com erro

def test_api_connection(client):
    """Testa a conex√£o e permiss√µes da API."""
    try:
        print("Testando conex√£o e permiss√µes da API...")
        
        # Testar acesso √† conta de futuros
        account_info = client.futures_account()
        print("‚úÖ Conex√£o com Binance Futures estabelecida com sucesso!")
        print(f"Saldo total da carteira: {account_info['totalWalletBalance']} USDT")
        
        # Testar se pode acessar informa√ß√µes de posi√ß√µes
        positions = client.futures_position_information()
        print(f"‚úÖ Acesso a {len(positions)} s√≠mbolos de futuros confirmado!")
        
        return True
    except Exception as e:
        print(f"‚ùå ERRO ao testar conex√£o: {e}")
        print("\nPoss√≠veis solu√ß√µes:")
        print("1. Verifique se suas API keys est√£o corretas")
        print("2. Certifique-se de que 'Enable Futures' est√° ativado na sua API key")
        print("3. Verifique se n√£o h√° restri√ß√µes de IP")
        print("4. Confirme que voc√™ tem saldo em USDT na conta de futuros")
        return False

def check_account_mode(client):
    """Verifica e informa sobre o modo da conta (Multi-Assets vs Single-Asset)."""
    try:
        # Tentar alterar o tipo de margem de um s√≠mbolo popular para detectar o modo
        test_symbol = 'BTCUSDT'
        try:
            client.futures_change_margin_type(symbol=test_symbol, marginType='ISOLATED')
            print("‚ÑπÔ∏è  Conta em modo Single-Asset (configura√ß√£o de margem dispon√≠vel)")
            return "single-asset"
        except Exception as e:
            if "Multi-Assets mode" in str(e):
                print("‚ÑπÔ∏è  Conta em modo Multi-Assets detectada")
                print("   üìã No modo Multi-Assets:")
                print("   ‚Ä¢ Todas as posi√ß√µes compartilham a margem")
                print("   ‚Ä¢ N√£o √© poss√≠vel alterar entre ISOLATED/CROSS para s√≠mbolos individuais")
                print("   ‚Ä¢ A alavancagem ainda pode ser configurada normalmente")
                print("   ‚Ä¢ O bot funcionar√° perfeitamente com essas configura√ß√µes\n")
                return "multi-assets"
            else:
                print(f"‚ö†Ô∏è  Erro ao detectar modo da conta: {e}")
                return "unknown"
    except Exception as e:
        print(f"‚ö†Ô∏è  N√£o foi poss√≠vel verificar o modo da conta: {e}")
        return "unknown"

