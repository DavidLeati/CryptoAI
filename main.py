# main.py
# Ponto de entrada e l√≥gica central (orquestrador) do rob√¥ de trading.
# Esta vers√£o √© multithread para analisar m√∫ltiplos ativos simultaneamente.

import time
import threading

# Importando as fun√ß√µes dos nossos m√≥dulos especialistas (acess√≥rios)
from exchange_setup import initialize_exchange
from data import fetch_data
from analysis import find_momentum_signal
from orders import open_long_position, open_short_position, close_position

# =============================================================================
# 1. CONFIGURA√á√ÉO GERAL E RECURSOS COMPARTILHADOS
# =============================================================================

# LISTA DE ATIVOS PARA MONITORAR SIMULTANEAMENTE
LISTA_DE_ATIVOS = [
    'BTC/USDT', 
    'ETH/USDT', 
    'SOL/USDT', 
    'BNB/USDT',
    'XRP/USDT'
]

# PAR√ÇMETROS DE TRADING
TRADE_VALUE_USD = 10.00      # Valor em USD para cada opera√ß√£o
STOP_LOSS_PCT = 1.5          # Stop-loss de 1.5%
LEVERAGE_LEVEL = 10           # Alavancagem de 10x

# RECURSOS COMPARTILHADOS ENTRE AS THREADS
# Usamos um 'set' para rastrear posi√ß√µes ativas de forma eficiente.
posicoes_ativas = set()
# Um 'Lock' √© ESSENCIAL para evitar que duas threads modifiquem o 'set' ao mesmo tempo (condi√ß√£o de corrida).
lock_posicoes = threading.Lock()


# =============================================================================
# 2. A L√ìGICA DO WORKER (O QUE CADA THREAD FAZ)
# =============================================================================

def processar_ativo(symbol, exchange):
    """
    Esta √© a fun√ß√£o principal que cada thread executa em um loop infinito
    para um √∫nico ativo.
    """
    print(f"‚úÖ Thread para {symbol} iniciada.")
    
    # Configura a alavancagem para este s√≠mbolo espec√≠fico antes de come√ßar
    # (Supondo que a fun√ß√£o em exchange_setup n√£o precise ser chamada aqui, 
    # mas se precisar, a chamada seria feita aqui dentro da thread)

    while True:
        try:
            # --- VERIFICA√á√ÉO DE ESTADO (THREAD-SAFE) ---
            with lock_posicoes:
                if symbol in posicoes_ativas:
                    # Se j√° temos uma posi√ß√£o aberta para este ativo, pulamos a an√°lise
                    # Em uma vers√£o futura, aqui poderia entrar a l√≥gica para SAIR da posi√ß√£o
                    # print(f"Posi√ß√£o j√° ativa para {symbol}. Apenas monitorando...")
                    time.sleep(10) # Pausa maior se j√° estamos em uma posi√ß√£o
                    continue

            # --- FLUXO DE OPERA√á√ÉO PADR√ÉO ---
            # 1. Coletar Dados
            market_data = fetch_data(exchange, symbol, timeframe='1m', limit=100)
            if market_data is None:
                time.sleep(5)
                continue

            # 2. Analisar Dados
            sinal = find_momentum_signal(market_data)
            
            # 3. Agir com Base no Sinal
            if sinal == 'COMPRAR':
                print(f"üö® SINAL DE COMPRA DETECTADO PARA {symbol}! üö®")
                sucesso = open_long_position(exchange, symbol, TRADE_VALUE_USD, STOP_LOSS_PCT)
                if sucesso:
                    print(f"Posi√ß√£o LONG para {symbol} aberta com sucesso.")
                    with lock_posicoes:
                        posicoes_ativas.add(symbol) # Adiciona ao set de posi√ß√µes ativas
            
            elif sinal == 'VENDER':
                print(f"üö® SINAL DE VENDA DETECTADO PARA {symbol}! üö®")
                sucesso = open_short_position(exchange, symbol, TRADE_VALUE_USD, STOP_LOSS_PCT)
                if sucesso:
                    print(f"Posi√ß√£o SHORT para {symbol} aberta com sucesso.")
                    with lock_posicoes:
                        posicoes_ativas.add(symbol) # Adiciona ao set de posi√ß√µes ativas
            
            else: # Sinal de AGUARDAR
                print(f"An√°lise para {symbol}: Nenhum sinal claro. Aguardando...")
                
            # Pausa para evitar sobrecarga da API
            time.sleep(5)

        except Exception as e:
            print(f"ERRO na thread de {symbol}: {e}")
            time.sleep(15)


# =============================================================================
# 3. O MAESTRO (FUN√á√ÉO PRINCIPAL)
# =============================================================================

def main():
    """
    Fun√ß√£o principal que prepara o ambiente e dispara as threads de an√°lise.
    """
    print("--- INICIANDO O ROB√î DE TRADING MULTITHREAD ---")
    
    # 1. Inicializa a conex√£o √∫nica e compartilhada com a exchange
    # Usamos o primeiro ativo da lista apenas como refer√™ncia para o setup inicial
    exchange = initialize_exchange(LISTA_DE_ATIVOS[0], LEVERAGE_LEVEL)
    if not exchange:
        print("Falha na inicializa√ß√£o da exchange. Encerrando o bot.")
        return

    # 2. Cria e inicia uma thread para cada ativo na nossa watchlist
    threads = []
    for symbol in LISTA_DE_ATIVOS:
        thread = threading.Thread(target=processar_ativo, args=(symbol, exchange))
        threads.append(thread)
        thread.start()
        time.sleep(1) # Pequena pausa para n√£o sobrecarregar a API na inicializa√ß√£o

    print(f"\n‚úÖ {len(threads)} threads de an√°lise est√£o rodando em paralelo.")
    print("O bot est√° operacional. Pressione Ctrl+C para encerrar.")

    # 3. Mant√©m a thread principal viva, esperando que as outras terminem
    # (o que, em nosso caso, √© nunca, a menos que o programa seja interrompido)
    for thread in threads:
        thread.join()

# =============================================================================
# PONTO DE ENTRADA DO PROGRAMA
# =============================================================================

if __name__ == '__main__':
    # ATEN√á√ÉO:
    # Antes de rodar, certifique-se de que suas vari√°veis de ambiente
    # BINANCE_API_KEY e BINANCE_API_SECRET est√£o configuradas.
    # COMECE SEMPRE NA TESTNET (sandbox mode) E COM VALORES BAIXOS!
    main()